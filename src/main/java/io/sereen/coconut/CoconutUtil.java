package io.sereen.coconut;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.log4j.Logger;

import javax.tools.*;
import java.io.File;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.sql.JDBCType;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLType;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;

/**
 * Kiran A (kiran@sereen.io)
 */
public class CoconutUtil {
    private static final Logger LOG = Logger.getLogger(CoconutUtil.class);
    private static final String JAVA_SUFFIX = ".java";
    public static Class<?> compileJavaModel(File srcDir, File classesDir, String className, String javaSource, ClassLoader parentClassLoader) throws Exception {
        try {
            Class cls = parentClassLoader.loadClass(className);
            return cls;
        }
        catch (ClassNotFoundException e) {
        }
        File javaFileDir = srcDir;
        String givenClassName = className;
        if(className.contains(".")) {
            className = className.replaceAll("\\.", "/");
            File srcFile = new File(srcDir, className);
            javaFileDir = srcFile.getParentFile();
            if(!javaFileDir.exists()) {
                boolean created = javaFileDir.mkdirs();
                if(!created) {
                    throw new IllegalStateException("couldn't create the package directory " + javaFileDir.getAbsolutePath());
                }
            }
            className = srcFile.getName();
        }

        String javaFileName = className + JAVA_SUFFIX;
        File srcFile = new File(javaFileDir, javaFileName);
        Files.write(srcFile.toPath(), javaSource.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);

        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, StandardCharsets.UTF_8);
        fileManager.setLocation(StandardLocation.CLASS_OUTPUT, Arrays.asList(classesDir));
        Iterable<? extends JavaFileObject> cmpUnit = fileManager.getJavaFileObjectsFromFiles(Arrays.asList(srcFile));
        Boolean result = compiler.getTask(null, fileManager, null, null, null, cmpUnit).call();
        fileManager.close();

        Class<?> newClass = null;
        if(result != null && result) {
            URLClassLoader urlClassLoader = URLClassLoader.newInstance(new URL[]{classesDir.toURI().toURL()}, parentClassLoader);
            newClass = urlClassLoader.loadClass(givenClassName);
        }

        return newClass;
    }

    public static void compileClasses(File srcDir, File classesDir, ClassLoader parentClassLoader) throws Exception {
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, StandardCharsets.UTF_8);
        fileManager.setLocation(StandardLocation.CLASS_OUTPUT, Arrays.asList(classesDir));

        Collection<File> javaFiles = FileUtils.listFiles(srcDir, new String[]{JAVA_SUFFIX.substring(1)}, true);
        if(javaFiles.isEmpty()) {
            return;
        }
        Iterable<? extends JavaFileObject> cmpUnit = fileManager.getJavaFileObjectsFromFiles(javaFiles);
        DiagnosticListener dl = new DiagnosticListener() {
            @Override
            public void report(Diagnostic diagnostic) {
                LOG.debug(diagnostic.getMessage(null));
            }
        };
        Boolean result = compiler.getTask(null, fileManager, dl, null, null, cmpUnit).call();
        fileManager.close();

        if(result != null && result) {
            URLClassLoader urlClassLoader = URLClassLoader.newInstance(new URL[]{classesDir.toURI().toURL()}, parentClassLoader);
            Collection<File> classes = FileUtils.listFiles(classesDir, new String[]{"class"}, true);
            int rootPathLen = classesDir.getAbsolutePath().length() + 1; // + 1 for the last File separator char
            for(File c : classes) {
                String path = c.getAbsolutePath().substring(rootPathLen);
                path = path.replace(".class", "");
                path = path.replace(File.separator, ".");
                urlClassLoader.loadClass(path);
            }
        }
    }

    // this function generates a very basic Java model that may require further embellishing
    public static String generateJavaModel(String tableName, ResultSetMetaData rsmd) throws SQLException {
        StringBuilder sb = new StringBuilder(1024);
        sb.append("/*\n");
        sb.append("Generated by Coconut on ").append(new Date()).append('\n');
        sb.append("*/\n\n");
        tableName = Character.toUpperCase(tableName.charAt(0)) + tableName.substring(1);
        sb.append("import io.sereen.coconut.Column;\npublic class ").append(tableName).append(" {\n");
        for(int i=1; i <= rsmd.getColumnCount(); i++) {
            String colName = rsmd.getColumnLabel(i);
            if(colName == null || colName.isEmpty()) {
                colName = rsmd.getColumnName(i);
            }

            String javaType = null;
            JDBCType type = JDBCType.valueOf(rsmd.getColumnType(i));
            switch (type) {
                case CHAR:
                    javaType = "char";
                    break;
                case DATE:
                    javaType = "java.sql.Date";
                    break;
                case TIME:
                    javaType = "java.sql.Time";
                    break;
                case TIMESTAMP:
                    javaType = "java.sql.Timestamp";
                    break;
                case DOUBLE:
                case FLOAT:
                case DECIMAL:
                    javaType = "double";
                    break;
                case NCHAR:
                case VARCHAR:
                case NVARCHAR:
                case LONGVARCHAR:
                case LONGNVARCHAR:
                    javaType = "String";
                    break;
                case BIGINT:
                case ROWID:
                    javaType = "long";
                    break;
                case BOOLEAN:
                    javaType = "boolean";
                    break;

                case INTEGER:
                    javaType = "int";
                    break;
                case TINYINT:
                case SMALLINT:
                    javaType = "short";
                    break;

                case TIME_WITH_TIMEZONE:
                case TIMESTAMP_WITH_TIMEZONE:
                case VARBINARY:
                case REF_CURSOR:
                case JAVA_OBJECT:
                case LONGVARBINARY:
                case DATALINK:
                case DISTINCT:
                case NUMERIC:
                case STRUCT:
                case SQLXML:
                case OTHER:
                case BINARY:
                case NCLOB:
                case ARRAY:
                case REAL:
                case NULL:
                case BIT:
                case REF:
                case BLOB:
                case CLOB:
                    throw new IllegalArgumentException("unsupported JDBC type " + type.getName());
            }

            sb.append("@Column(\"").append(colName).append("\")\n");
            colName = colName.replace(' ', '_');
            sb.append("public ").append(javaType).append(' ').append(colName).append(";\n");
        }
        sb.append('}');
        return sb.toString();
    }

    public static void createDir(File dir) {
        if(!dir.exists()) {
            boolean created = dir.mkdir();
            if(!created) {
                throw new IllegalStateException("could not create directory " + dir.getAbsolutePath());
            }
        }
    }
}
